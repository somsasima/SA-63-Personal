// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/ssaatw/app/ent/department"
	"github.com/ssaatw/app/ent/gender"
	"github.com/ssaatw/app/ent/jobtitle"
	"github.com/ssaatw/app/ent/personal"
)

// Personal is the model entity for the Personal schema.
type Personal struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// PersonalName holds the value of the "PersonalName" field.
	PersonalName string `json:"PersonalName,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PersonalQuery when eager-loading is set.
	Edges         PersonalEdges `json:"edges"`
	department_id *int
	gender_id     *int
	jobtitle_id   *int
}

// PersonalEdges holds the relations/edges for other nodes in the graph.
type PersonalEdges struct {
	// Jobtitle holds the value of the jobtitle edge.
	Jobtitle *Jobtitle
	// Department holds the value of the department edge.
	Department *Department
	// Gender holds the value of the gender edge.
	Gender *Gender
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// JobtitleOrErr returns the Jobtitle value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PersonalEdges) JobtitleOrErr() (*Jobtitle, error) {
	if e.loadedTypes[0] {
		if e.Jobtitle == nil {
			// The edge jobtitle was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: jobtitle.Label}
		}
		return e.Jobtitle, nil
	}
	return nil, &NotLoadedError{edge: "jobtitle"}
}

// DepartmentOrErr returns the Department value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PersonalEdges) DepartmentOrErr() (*Department, error) {
	if e.loadedTypes[1] {
		if e.Department == nil {
			// The edge department was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: department.Label}
		}
		return e.Department, nil
	}
	return nil, &NotLoadedError{edge: "department"}
}

// GenderOrErr returns the Gender value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PersonalEdges) GenderOrErr() (*Gender, error) {
	if e.loadedTypes[2] {
		if e.Gender == nil {
			// The edge gender was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: gender.Label}
		}
		return e.Gender, nil
	}
	return nil, &NotLoadedError{edge: "gender"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Personal) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // PersonalName
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Personal) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // department_id
		&sql.NullInt64{}, // gender_id
		&sql.NullInt64{}, // jobtitle_id
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Personal fields.
func (pe *Personal) assignValues(values ...interface{}) error {
	if m, n := len(values), len(personal.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	pe.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field PersonalName", values[0])
	} else if value.Valid {
		pe.PersonalName = value.String
	}
	values = values[1:]
	if len(values) == len(personal.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field department_id", value)
		} else if value.Valid {
			pe.department_id = new(int)
			*pe.department_id = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field gender_id", value)
		} else if value.Valid {
			pe.gender_id = new(int)
			*pe.gender_id = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field jobtitle_id", value)
		} else if value.Valid {
			pe.jobtitle_id = new(int)
			*pe.jobtitle_id = int(value.Int64)
		}
	}
	return nil
}

// QueryJobtitle queries the jobtitle edge of the Personal.
func (pe *Personal) QueryJobtitle() *JobtitleQuery {
	return (&PersonalClient{config: pe.config}).QueryJobtitle(pe)
}

// QueryDepartment queries the department edge of the Personal.
func (pe *Personal) QueryDepartment() *DepartmentQuery {
	return (&PersonalClient{config: pe.config}).QueryDepartment(pe)
}

// QueryGender queries the gender edge of the Personal.
func (pe *Personal) QueryGender() *GenderQuery {
	return (&PersonalClient{config: pe.config}).QueryGender(pe)
}

// Update returns a builder for updating this Personal.
// Note that, you need to call Personal.Unwrap() before calling this method, if this Personal
// was returned from a transaction, and the transaction was committed or rolled back.
func (pe *Personal) Update() *PersonalUpdateOne {
	return (&PersonalClient{config: pe.config}).UpdateOne(pe)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (pe *Personal) Unwrap() *Personal {
	tx, ok := pe.config.driver.(*txDriver)
	if !ok {
		panic("ent: Personal is not a transactional entity")
	}
	pe.config.driver = tx.drv
	return pe
}

// String implements the fmt.Stringer.
func (pe *Personal) String() string {
	var builder strings.Builder
	builder.WriteString("Personal(")
	builder.WriteString(fmt.Sprintf("id=%v", pe.ID))
	builder.WriteString(", PersonalName=")
	builder.WriteString(pe.PersonalName)
	builder.WriteByte(')')
	return builder.String()
}

// Personals is a parsable slice of Personal.
type Personals []*Personal

func (pe Personals) config(cfg config) {
	for _i := range pe {
		pe[_i].config = cfg
	}
}
