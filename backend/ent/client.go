// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/ssaatw/app/ent/migrate"

	"github.com/ssaatw/app/ent/department"
	"github.com/ssaatw/app/ent/jobtitle"
	"github.com/ssaatw/app/ent/personal"
	"github.com/ssaatw/app/ent/systemmember"

	"github.com/facebookincubator/ent/dialect"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Department is the client for interacting with the Department builders.
	Department *DepartmentClient
	// Jobtitle is the client for interacting with the Jobtitle builders.
	Jobtitle *JobtitleClient
	// Personal is the client for interacting with the Personal builders.
	Personal *PersonalClient
	// Systemmember is the client for interacting with the Systemmember builders.
	Systemmember *SystemmemberClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Department = NewDepartmentClient(c.config)
	c.Jobtitle = NewJobtitleClient(c.config)
	c.Personal = NewPersonalClient(c.config)
	c.Systemmember = NewSystemmemberClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: tx, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		Department:   NewDepartmentClient(cfg),
		Jobtitle:     NewJobtitleClient(cfg),
		Personal:     NewPersonalClient(cfg),
		Systemmember: NewSystemmemberClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(*sql.Driver).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: &txDriver{tx: tx, drv: c.driver}, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		config:       cfg,
		Department:   NewDepartmentClient(cfg),
		Jobtitle:     NewJobtitleClient(cfg),
		Personal:     NewPersonalClient(cfg),
		Systemmember: NewSystemmemberClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Department.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Department.Use(hooks...)
	c.Jobtitle.Use(hooks...)
	c.Personal.Use(hooks...)
	c.Systemmember.Use(hooks...)
}

// DepartmentClient is a client for the Department schema.
type DepartmentClient struct {
	config
}

// NewDepartmentClient returns a client for the Department from the given config.
func NewDepartmentClient(c config) *DepartmentClient {
	return &DepartmentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `department.Hooks(f(g(h())))`.
func (c *DepartmentClient) Use(hooks ...Hook) {
	c.hooks.Department = append(c.hooks.Department, hooks...)
}

// Create returns a create builder for Department.
func (c *DepartmentClient) Create() *DepartmentCreate {
	mutation := newDepartmentMutation(c.config, OpCreate)
	return &DepartmentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Department.
func (c *DepartmentClient) Update() *DepartmentUpdate {
	mutation := newDepartmentMutation(c.config, OpUpdate)
	return &DepartmentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DepartmentClient) UpdateOne(d *Department) *DepartmentUpdateOne {
	mutation := newDepartmentMutation(c.config, OpUpdateOne, withDepartment(d))
	return &DepartmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DepartmentClient) UpdateOneID(id int) *DepartmentUpdateOne {
	mutation := newDepartmentMutation(c.config, OpUpdateOne, withDepartmentID(id))
	return &DepartmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Department.
func (c *DepartmentClient) Delete() *DepartmentDelete {
	mutation := newDepartmentMutation(c.config, OpDelete)
	return &DepartmentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DepartmentClient) DeleteOne(d *Department) *DepartmentDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DepartmentClient) DeleteOneID(id int) *DepartmentDeleteOne {
	builder := c.Delete().Where(department.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DepartmentDeleteOne{builder}
}

// Create returns a query builder for Department.
func (c *DepartmentClient) Query() *DepartmentQuery {
	return &DepartmentQuery{config: c.config}
}

// Get returns a Department entity by its id.
func (c *DepartmentClient) Get(ctx context.Context, id int) (*Department, error) {
	return c.Query().Where(department.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DepartmentClient) GetX(ctx context.Context, id int) *Department {
	d, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return d
}

// QueryPersonal queries the personal edge of a Department.
func (c *DepartmentClient) QueryPersonal(d *Department) *PersonalQuery {
	query := &PersonalQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(department.Table, department.FieldID, id),
			sqlgraph.To(personal.Table, personal.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, department.PersonalTable, department.PersonalColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DepartmentClient) Hooks() []Hook {
	return c.hooks.Department
}

// JobtitleClient is a client for the Jobtitle schema.
type JobtitleClient struct {
	config
}

// NewJobtitleClient returns a client for the Jobtitle from the given config.
func NewJobtitleClient(c config) *JobtitleClient {
	return &JobtitleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `jobtitle.Hooks(f(g(h())))`.
func (c *JobtitleClient) Use(hooks ...Hook) {
	c.hooks.Jobtitle = append(c.hooks.Jobtitle, hooks...)
}

// Create returns a create builder for Jobtitle.
func (c *JobtitleClient) Create() *JobtitleCreate {
	mutation := newJobtitleMutation(c.config, OpCreate)
	return &JobtitleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Jobtitle.
func (c *JobtitleClient) Update() *JobtitleUpdate {
	mutation := newJobtitleMutation(c.config, OpUpdate)
	return &JobtitleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *JobtitleClient) UpdateOne(j *Jobtitle) *JobtitleUpdateOne {
	mutation := newJobtitleMutation(c.config, OpUpdateOne, withJobtitle(j))
	return &JobtitleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *JobtitleClient) UpdateOneID(id int) *JobtitleUpdateOne {
	mutation := newJobtitleMutation(c.config, OpUpdateOne, withJobtitleID(id))
	return &JobtitleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Jobtitle.
func (c *JobtitleClient) Delete() *JobtitleDelete {
	mutation := newJobtitleMutation(c.config, OpDelete)
	return &JobtitleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *JobtitleClient) DeleteOne(j *Jobtitle) *JobtitleDeleteOne {
	return c.DeleteOneID(j.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *JobtitleClient) DeleteOneID(id int) *JobtitleDeleteOne {
	builder := c.Delete().Where(jobtitle.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &JobtitleDeleteOne{builder}
}

// Create returns a query builder for Jobtitle.
func (c *JobtitleClient) Query() *JobtitleQuery {
	return &JobtitleQuery{config: c.config}
}

// Get returns a Jobtitle entity by its id.
func (c *JobtitleClient) Get(ctx context.Context, id int) (*Jobtitle, error) {
	return c.Query().Where(jobtitle.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *JobtitleClient) GetX(ctx context.Context, id int) *Jobtitle {
	j, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return j
}

// QueryPersonal queries the personal edge of a Jobtitle.
func (c *JobtitleClient) QueryPersonal(j *Jobtitle) *PersonalQuery {
	query := &PersonalQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := j.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(jobtitle.Table, jobtitle.FieldID, id),
			sqlgraph.To(personal.Table, personal.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, jobtitle.PersonalTable, jobtitle.PersonalColumn),
		)
		fromV = sqlgraph.Neighbors(j.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *JobtitleClient) Hooks() []Hook {
	return c.hooks.Jobtitle
}

// PersonalClient is a client for the Personal schema.
type PersonalClient struct {
	config
}

// NewPersonalClient returns a client for the Personal from the given config.
func NewPersonalClient(c config) *PersonalClient {
	return &PersonalClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `personal.Hooks(f(g(h())))`.
func (c *PersonalClient) Use(hooks ...Hook) {
	c.hooks.Personal = append(c.hooks.Personal, hooks...)
}

// Create returns a create builder for Personal.
func (c *PersonalClient) Create() *PersonalCreate {
	mutation := newPersonalMutation(c.config, OpCreate)
	return &PersonalCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Personal.
func (c *PersonalClient) Update() *PersonalUpdate {
	mutation := newPersonalMutation(c.config, OpUpdate)
	return &PersonalUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PersonalClient) UpdateOne(pe *Personal) *PersonalUpdateOne {
	mutation := newPersonalMutation(c.config, OpUpdateOne, withPersonal(pe))
	return &PersonalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PersonalClient) UpdateOneID(id int) *PersonalUpdateOne {
	mutation := newPersonalMutation(c.config, OpUpdateOne, withPersonalID(id))
	return &PersonalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Personal.
func (c *PersonalClient) Delete() *PersonalDelete {
	mutation := newPersonalMutation(c.config, OpDelete)
	return &PersonalDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PersonalClient) DeleteOne(pe *Personal) *PersonalDeleteOne {
	return c.DeleteOneID(pe.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PersonalClient) DeleteOneID(id int) *PersonalDeleteOne {
	builder := c.Delete().Where(personal.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PersonalDeleteOne{builder}
}

// Create returns a query builder for Personal.
func (c *PersonalClient) Query() *PersonalQuery {
	return &PersonalQuery{config: c.config}
}

// Get returns a Personal entity by its id.
func (c *PersonalClient) Get(ctx context.Context, id int) (*Personal, error) {
	return c.Query().Where(personal.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PersonalClient) GetX(ctx context.Context, id int) *Personal {
	pe, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return pe
}

// QueryJobtitle queries the jobtitle edge of a Personal.
func (c *PersonalClient) QueryJobtitle(pe *Personal) *JobtitleQuery {
	query := &JobtitleQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pe.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(personal.Table, personal.FieldID, id),
			sqlgraph.To(jobtitle.Table, jobtitle.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, personal.JobtitleTable, personal.JobtitleColumn),
		)
		fromV = sqlgraph.Neighbors(pe.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDepartment queries the department edge of a Personal.
func (c *PersonalClient) QueryDepartment(pe *Personal) *DepartmentQuery {
	query := &DepartmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pe.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(personal.Table, personal.FieldID, id),
			sqlgraph.To(department.Table, department.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, personal.DepartmentTable, personal.DepartmentColumn),
		)
		fromV = sqlgraph.Neighbors(pe.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySystemmember queries the systemmember edge of a Personal.
func (c *PersonalClient) QuerySystemmember(pe *Personal) *SystemmemberQuery {
	query := &SystemmemberQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pe.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(personal.Table, personal.FieldID, id),
			sqlgraph.To(systemmember.Table, systemmember.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, personal.SystemmemberTable, personal.SystemmemberColumn),
		)
		fromV = sqlgraph.Neighbors(pe.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PersonalClient) Hooks() []Hook {
	return c.hooks.Personal
}

// SystemmemberClient is a client for the Systemmember schema.
type SystemmemberClient struct {
	config
}

// NewSystemmemberClient returns a client for the Systemmember from the given config.
func NewSystemmemberClient(c config) *SystemmemberClient {
	return &SystemmemberClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `systemmember.Hooks(f(g(h())))`.
func (c *SystemmemberClient) Use(hooks ...Hook) {
	c.hooks.Systemmember = append(c.hooks.Systemmember, hooks...)
}

// Create returns a create builder for Systemmember.
func (c *SystemmemberClient) Create() *SystemmemberCreate {
	mutation := newSystemmemberMutation(c.config, OpCreate)
	return &SystemmemberCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Systemmember.
func (c *SystemmemberClient) Update() *SystemmemberUpdate {
	mutation := newSystemmemberMutation(c.config, OpUpdate)
	return &SystemmemberUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SystemmemberClient) UpdateOne(s *Systemmember) *SystemmemberUpdateOne {
	mutation := newSystemmemberMutation(c.config, OpUpdateOne, withSystemmember(s))
	return &SystemmemberUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SystemmemberClient) UpdateOneID(id int) *SystemmemberUpdateOne {
	mutation := newSystemmemberMutation(c.config, OpUpdateOne, withSystemmemberID(id))
	return &SystemmemberUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Systemmember.
func (c *SystemmemberClient) Delete() *SystemmemberDelete {
	mutation := newSystemmemberMutation(c.config, OpDelete)
	return &SystemmemberDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SystemmemberClient) DeleteOne(s *Systemmember) *SystemmemberDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SystemmemberClient) DeleteOneID(id int) *SystemmemberDeleteOne {
	builder := c.Delete().Where(systemmember.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SystemmemberDeleteOne{builder}
}

// Create returns a query builder for Systemmember.
func (c *SystemmemberClient) Query() *SystemmemberQuery {
	return &SystemmemberQuery{config: c.config}
}

// Get returns a Systemmember entity by its id.
func (c *SystemmemberClient) Get(ctx context.Context, id int) (*Systemmember, error) {
	return c.Query().Where(systemmember.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SystemmemberClient) GetX(ctx context.Context, id int) *Systemmember {
	s, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return s
}

// QueryPersonal queries the personal edge of a Systemmember.
func (c *SystemmemberClient) QueryPersonal(s *Systemmember) *PersonalQuery {
	query := &PersonalQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(systemmember.Table, systemmember.FieldID, id),
			sqlgraph.To(personal.Table, personal.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, systemmember.PersonalTable, systemmember.PersonalColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SystemmemberClient) Hooks() []Hook {
	return c.hooks.Systemmember
}
