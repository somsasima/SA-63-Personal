// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/ssaatw/app/ent/department"
	"github.com/ssaatw/app/ent/jobtitle"
	"github.com/ssaatw/app/ent/personal"
	"github.com/ssaatw/app/ent/systemmember"

	"github.com/facebookincubator/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeDepartment   = "Department"
	TypeJobtitle     = "Jobtitle"
	TypePersonal     = "Personal"
	TypeSystemmember = "Systemmember"
)

// DepartmentMutation represents an operation that mutate the Departments
// nodes in the graph.
type DepartmentMutation struct {
	config
	op              Op
	typ             string
	id              *int
	_Departmentname *string
	clearedFields   map[string]struct{}
	personal        map[int]struct{}
	removedpersonal map[int]struct{}
	done            bool
	oldValue        func(context.Context) (*Department, error)
}

var _ ent.Mutation = (*DepartmentMutation)(nil)

// departmentOption allows to manage the mutation configuration using functional options.
type departmentOption func(*DepartmentMutation)

// newDepartmentMutation creates new mutation for $n.Name.
func newDepartmentMutation(c config, op Op, opts ...departmentOption) *DepartmentMutation {
	m := &DepartmentMutation{
		config:        c,
		op:            op,
		typ:           TypeDepartment,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDepartmentID sets the id field of the mutation.
func withDepartmentID(id int) departmentOption {
	return func(m *DepartmentMutation) {
		var (
			err   error
			once  sync.Once
			value *Department
		)
		m.oldValue = func(ctx context.Context) (*Department, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Department.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDepartment sets the old Department of the mutation.
func withDepartment(node *Department) departmentOption {
	return func(m *DepartmentMutation) {
		m.oldValue = func(context.Context) (*Department, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DepartmentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DepartmentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *DepartmentMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetDepartmentname sets the Departmentname field.
func (m *DepartmentMutation) SetDepartmentname(s string) {
	m._Departmentname = &s
}

// Departmentname returns the Departmentname value in the mutation.
func (m *DepartmentMutation) Departmentname() (r string, exists bool) {
	v := m._Departmentname
	if v == nil {
		return
	}
	return *v, true
}

// OldDepartmentname returns the old Departmentname value of the Department.
// If the Department object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DepartmentMutation) OldDepartmentname(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDepartmentname is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDepartmentname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDepartmentname: %w", err)
	}
	return oldValue.Departmentname, nil
}

// ResetDepartmentname reset all changes of the "Departmentname" field.
func (m *DepartmentMutation) ResetDepartmentname() {
	m._Departmentname = nil
}

// AddPersonalIDs adds the personal edge to Personal by ids.
func (m *DepartmentMutation) AddPersonalIDs(ids ...int) {
	if m.personal == nil {
		m.personal = make(map[int]struct{})
	}
	for i := range ids {
		m.personal[ids[i]] = struct{}{}
	}
}

// RemovePersonalIDs removes the personal edge to Personal by ids.
func (m *DepartmentMutation) RemovePersonalIDs(ids ...int) {
	if m.removedpersonal == nil {
		m.removedpersonal = make(map[int]struct{})
	}
	for i := range ids {
		m.removedpersonal[ids[i]] = struct{}{}
	}
}

// RemovedPersonal returns the removed ids of personal.
func (m *DepartmentMutation) RemovedPersonalIDs() (ids []int) {
	for id := range m.removedpersonal {
		ids = append(ids, id)
	}
	return
}

// PersonalIDs returns the personal ids in the mutation.
func (m *DepartmentMutation) PersonalIDs() (ids []int) {
	for id := range m.personal {
		ids = append(ids, id)
	}
	return
}

// ResetPersonal reset all changes of the "personal" edge.
func (m *DepartmentMutation) ResetPersonal() {
	m.personal = nil
	m.removedpersonal = nil
}

// Op returns the operation name.
func (m *DepartmentMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Department).
func (m *DepartmentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *DepartmentMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._Departmentname != nil {
		fields = append(fields, department.FieldDepartmentname)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *DepartmentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case department.FieldDepartmentname:
		return m.Departmentname()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *DepartmentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case department.FieldDepartmentname:
		return m.OldDepartmentname(ctx)
	}
	return nil, fmt.Errorf("unknown Department field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DepartmentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case department.FieldDepartmentname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDepartmentname(v)
		return nil
	}
	return fmt.Errorf("unknown Department field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *DepartmentMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *DepartmentMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DepartmentMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Department numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *DepartmentMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *DepartmentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *DepartmentMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Department nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *DepartmentMutation) ResetField(name string) error {
	switch name {
	case department.FieldDepartmentname:
		m.ResetDepartmentname()
		return nil
	}
	return fmt.Errorf("unknown Department field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *DepartmentMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.personal != nil {
		edges = append(edges, department.EdgePersonal)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *DepartmentMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case department.EdgePersonal:
		ids := make([]ent.Value, 0, len(m.personal))
		for id := range m.personal {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *DepartmentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedpersonal != nil {
		edges = append(edges, department.EdgePersonal)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *DepartmentMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case department.EdgePersonal:
		ids := make([]ent.Value, 0, len(m.removedpersonal))
		for id := range m.removedpersonal {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *DepartmentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *DepartmentMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *DepartmentMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Department unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *DepartmentMutation) ResetEdge(name string) error {
	switch name {
	case department.EdgePersonal:
		m.ResetPersonal()
		return nil
	}
	return fmt.Errorf("unknown Department edge %s", name)
}

// JobtitleMutation represents an operation that mutate the Jobtitles
// nodes in the graph.
type JobtitleMutation struct {
	config
	op              Op
	typ             string
	id              *int
	_Jobtitlename   *string
	clearedFields   map[string]struct{}
	personal        map[int]struct{}
	removedpersonal map[int]struct{}
	done            bool
	oldValue        func(context.Context) (*Jobtitle, error)
}

var _ ent.Mutation = (*JobtitleMutation)(nil)

// jobtitleOption allows to manage the mutation configuration using functional options.
type jobtitleOption func(*JobtitleMutation)

// newJobtitleMutation creates new mutation for $n.Name.
func newJobtitleMutation(c config, op Op, opts ...jobtitleOption) *JobtitleMutation {
	m := &JobtitleMutation{
		config:        c,
		op:            op,
		typ:           TypeJobtitle,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withJobtitleID sets the id field of the mutation.
func withJobtitleID(id int) jobtitleOption {
	return func(m *JobtitleMutation) {
		var (
			err   error
			once  sync.Once
			value *Jobtitle
		)
		m.oldValue = func(ctx context.Context) (*Jobtitle, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Jobtitle.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withJobtitle sets the old Jobtitle of the mutation.
func withJobtitle(node *Jobtitle) jobtitleOption {
	return func(m *JobtitleMutation) {
		m.oldValue = func(context.Context) (*Jobtitle, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m JobtitleMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m JobtitleMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *JobtitleMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetJobtitlename sets the Jobtitlename field.
func (m *JobtitleMutation) SetJobtitlename(s string) {
	m._Jobtitlename = &s
}

// Jobtitlename returns the Jobtitlename value in the mutation.
func (m *JobtitleMutation) Jobtitlename() (r string, exists bool) {
	v := m._Jobtitlename
	if v == nil {
		return
	}
	return *v, true
}

// OldJobtitlename returns the old Jobtitlename value of the Jobtitle.
// If the Jobtitle object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *JobtitleMutation) OldJobtitlename(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldJobtitlename is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldJobtitlename requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldJobtitlename: %w", err)
	}
	return oldValue.Jobtitlename, nil
}

// ResetJobtitlename reset all changes of the "Jobtitlename" field.
func (m *JobtitleMutation) ResetJobtitlename() {
	m._Jobtitlename = nil
}

// AddPersonalIDs adds the personal edge to Personal by ids.
func (m *JobtitleMutation) AddPersonalIDs(ids ...int) {
	if m.personal == nil {
		m.personal = make(map[int]struct{})
	}
	for i := range ids {
		m.personal[ids[i]] = struct{}{}
	}
}

// RemovePersonalIDs removes the personal edge to Personal by ids.
func (m *JobtitleMutation) RemovePersonalIDs(ids ...int) {
	if m.removedpersonal == nil {
		m.removedpersonal = make(map[int]struct{})
	}
	for i := range ids {
		m.removedpersonal[ids[i]] = struct{}{}
	}
}

// RemovedPersonal returns the removed ids of personal.
func (m *JobtitleMutation) RemovedPersonalIDs() (ids []int) {
	for id := range m.removedpersonal {
		ids = append(ids, id)
	}
	return
}

// PersonalIDs returns the personal ids in the mutation.
func (m *JobtitleMutation) PersonalIDs() (ids []int) {
	for id := range m.personal {
		ids = append(ids, id)
	}
	return
}

// ResetPersonal reset all changes of the "personal" edge.
func (m *JobtitleMutation) ResetPersonal() {
	m.personal = nil
	m.removedpersonal = nil
}

// Op returns the operation name.
func (m *JobtitleMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Jobtitle).
func (m *JobtitleMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *JobtitleMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._Jobtitlename != nil {
		fields = append(fields, jobtitle.FieldJobtitlename)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *JobtitleMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case jobtitle.FieldJobtitlename:
		return m.Jobtitlename()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *JobtitleMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case jobtitle.FieldJobtitlename:
		return m.OldJobtitlename(ctx)
	}
	return nil, fmt.Errorf("unknown Jobtitle field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *JobtitleMutation) SetField(name string, value ent.Value) error {
	switch name {
	case jobtitle.FieldJobtitlename:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetJobtitlename(v)
		return nil
	}
	return fmt.Errorf("unknown Jobtitle field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *JobtitleMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *JobtitleMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *JobtitleMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Jobtitle numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *JobtitleMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *JobtitleMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *JobtitleMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Jobtitle nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *JobtitleMutation) ResetField(name string) error {
	switch name {
	case jobtitle.FieldJobtitlename:
		m.ResetJobtitlename()
		return nil
	}
	return fmt.Errorf("unknown Jobtitle field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *JobtitleMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.personal != nil {
		edges = append(edges, jobtitle.EdgePersonal)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *JobtitleMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case jobtitle.EdgePersonal:
		ids := make([]ent.Value, 0, len(m.personal))
		for id := range m.personal {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *JobtitleMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedpersonal != nil {
		edges = append(edges, jobtitle.EdgePersonal)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *JobtitleMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case jobtitle.EdgePersonal:
		ids := make([]ent.Value, 0, len(m.removedpersonal))
		for id := range m.removedpersonal {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *JobtitleMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *JobtitleMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *JobtitleMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Jobtitle unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *JobtitleMutation) ResetEdge(name string) error {
	switch name {
	case jobtitle.EdgePersonal:
		m.ResetPersonal()
		return nil
	}
	return fmt.Errorf("unknown Jobtitle edge %s", name)
}

// PersonalMutation represents an operation that mutate the Personals
// nodes in the graph.
type PersonalMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	_PersonalName       *string
	_PersonalMail       *string
	_PersonalPhone      *string
	_Added              *time.Time
	clearedFields       map[string]struct{}
	jobtitle            *int
	clearedjobtitle     bool
	department          *int
	cleareddepartment   bool
	systemmember        *int
	clearedsystemmember bool
	done                bool
	oldValue            func(context.Context) (*Personal, error)
}

var _ ent.Mutation = (*PersonalMutation)(nil)

// personalOption allows to manage the mutation configuration using functional options.
type personalOption func(*PersonalMutation)

// newPersonalMutation creates new mutation for $n.Name.
func newPersonalMutation(c config, op Op, opts ...personalOption) *PersonalMutation {
	m := &PersonalMutation{
		config:        c,
		op:            op,
		typ:           TypePersonal,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPersonalID sets the id field of the mutation.
func withPersonalID(id int) personalOption {
	return func(m *PersonalMutation) {
		var (
			err   error
			once  sync.Once
			value *Personal
		)
		m.oldValue = func(ctx context.Context) (*Personal, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Personal.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPersonal sets the old Personal of the mutation.
func withPersonal(node *Personal) personalOption {
	return func(m *PersonalMutation) {
		m.oldValue = func(context.Context) (*Personal, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PersonalMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PersonalMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *PersonalMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetPersonalName sets the PersonalName field.
func (m *PersonalMutation) SetPersonalName(s string) {
	m._PersonalName = &s
}

// PersonalName returns the PersonalName value in the mutation.
func (m *PersonalMutation) PersonalName() (r string, exists bool) {
	v := m._PersonalName
	if v == nil {
		return
	}
	return *v, true
}

// OldPersonalName returns the old PersonalName value of the Personal.
// If the Personal object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PersonalMutation) OldPersonalName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPersonalName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPersonalName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPersonalName: %w", err)
	}
	return oldValue.PersonalName, nil
}

// ResetPersonalName reset all changes of the "PersonalName" field.
func (m *PersonalMutation) ResetPersonalName() {
	m._PersonalName = nil
}

// SetPersonalMail sets the PersonalMail field.
func (m *PersonalMutation) SetPersonalMail(s string) {
	m._PersonalMail = &s
}

// PersonalMail returns the PersonalMail value in the mutation.
func (m *PersonalMutation) PersonalMail() (r string, exists bool) {
	v := m._PersonalMail
	if v == nil {
		return
	}
	return *v, true
}

// OldPersonalMail returns the old PersonalMail value of the Personal.
// If the Personal object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PersonalMutation) OldPersonalMail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPersonalMail is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPersonalMail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPersonalMail: %w", err)
	}
	return oldValue.PersonalMail, nil
}

// ResetPersonalMail reset all changes of the "PersonalMail" field.
func (m *PersonalMutation) ResetPersonalMail() {
	m._PersonalMail = nil
}

// SetPersonalPhone sets the PersonalPhone field.
func (m *PersonalMutation) SetPersonalPhone(s string) {
	m._PersonalPhone = &s
}

// PersonalPhone returns the PersonalPhone value in the mutation.
func (m *PersonalMutation) PersonalPhone() (r string, exists bool) {
	v := m._PersonalPhone
	if v == nil {
		return
	}
	return *v, true
}

// OldPersonalPhone returns the old PersonalPhone value of the Personal.
// If the Personal object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PersonalMutation) OldPersonalPhone(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPersonalPhone is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPersonalPhone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPersonalPhone: %w", err)
	}
	return oldValue.PersonalPhone, nil
}

// ResetPersonalPhone reset all changes of the "PersonalPhone" field.
func (m *PersonalMutation) ResetPersonalPhone() {
	m._PersonalPhone = nil
}

// SetAdded sets the Added field.
func (m *PersonalMutation) SetAdded(t time.Time) {
	m._Added = &t
}

// Added returns the Added value in the mutation.
func (m *PersonalMutation) Added() (r time.Time, exists bool) {
	v := m._Added
	if v == nil {
		return
	}
	return *v, true
}

// OldAdded returns the old Added value of the Personal.
// If the Personal object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PersonalMutation) OldAdded(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAdded is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAdded requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAdded: %w", err)
	}
	return oldValue.Added, nil
}

// ResetAdded reset all changes of the "Added" field.
func (m *PersonalMutation) ResetAdded() {
	m._Added = nil
}

// SetJobtitleID sets the jobtitle edge to Jobtitle by id.
func (m *PersonalMutation) SetJobtitleID(id int) {
	m.jobtitle = &id
}

// ClearJobtitle clears the jobtitle edge to Jobtitle.
func (m *PersonalMutation) ClearJobtitle() {
	m.clearedjobtitle = true
}

// JobtitleCleared returns if the edge jobtitle was cleared.
func (m *PersonalMutation) JobtitleCleared() bool {
	return m.clearedjobtitle
}

// JobtitleID returns the jobtitle id in the mutation.
func (m *PersonalMutation) JobtitleID() (id int, exists bool) {
	if m.jobtitle != nil {
		return *m.jobtitle, true
	}
	return
}

// JobtitleIDs returns the jobtitle ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// JobtitleID instead. It exists only for internal usage by the builders.
func (m *PersonalMutation) JobtitleIDs() (ids []int) {
	if id := m.jobtitle; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetJobtitle reset all changes of the "jobtitle" edge.
func (m *PersonalMutation) ResetJobtitle() {
	m.jobtitle = nil
	m.clearedjobtitle = false
}

// SetDepartmentID sets the department edge to Department by id.
func (m *PersonalMutation) SetDepartmentID(id int) {
	m.department = &id
}

// ClearDepartment clears the department edge to Department.
func (m *PersonalMutation) ClearDepartment() {
	m.cleareddepartment = true
}

// DepartmentCleared returns if the edge department was cleared.
func (m *PersonalMutation) DepartmentCleared() bool {
	return m.cleareddepartment
}

// DepartmentID returns the department id in the mutation.
func (m *PersonalMutation) DepartmentID() (id int, exists bool) {
	if m.department != nil {
		return *m.department, true
	}
	return
}

// DepartmentIDs returns the department ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// DepartmentID instead. It exists only for internal usage by the builders.
func (m *PersonalMutation) DepartmentIDs() (ids []int) {
	if id := m.department; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDepartment reset all changes of the "department" edge.
func (m *PersonalMutation) ResetDepartment() {
	m.department = nil
	m.cleareddepartment = false
}

// SetSystemmemberID sets the systemmember edge to Systemmember by id.
func (m *PersonalMutation) SetSystemmemberID(id int) {
	m.systemmember = &id
}

// ClearSystemmember clears the systemmember edge to Systemmember.
func (m *PersonalMutation) ClearSystemmember() {
	m.clearedsystemmember = true
}

// SystemmemberCleared returns if the edge systemmember was cleared.
func (m *PersonalMutation) SystemmemberCleared() bool {
	return m.clearedsystemmember
}

// SystemmemberID returns the systemmember id in the mutation.
func (m *PersonalMutation) SystemmemberID() (id int, exists bool) {
	if m.systemmember != nil {
		return *m.systemmember, true
	}
	return
}

// SystemmemberIDs returns the systemmember ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// SystemmemberID instead. It exists only for internal usage by the builders.
func (m *PersonalMutation) SystemmemberIDs() (ids []int) {
	if id := m.systemmember; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSystemmember reset all changes of the "systemmember" edge.
func (m *PersonalMutation) ResetSystemmember() {
	m.systemmember = nil
	m.clearedsystemmember = false
}

// Op returns the operation name.
func (m *PersonalMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Personal).
func (m *PersonalMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *PersonalMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m._PersonalName != nil {
		fields = append(fields, personal.FieldPersonalName)
	}
	if m._PersonalMail != nil {
		fields = append(fields, personal.FieldPersonalMail)
	}
	if m._PersonalPhone != nil {
		fields = append(fields, personal.FieldPersonalPhone)
	}
	if m._Added != nil {
		fields = append(fields, personal.FieldAdded)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *PersonalMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case personal.FieldPersonalName:
		return m.PersonalName()
	case personal.FieldPersonalMail:
		return m.PersonalMail()
	case personal.FieldPersonalPhone:
		return m.PersonalPhone()
	case personal.FieldAdded:
		return m.Added()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *PersonalMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case personal.FieldPersonalName:
		return m.OldPersonalName(ctx)
	case personal.FieldPersonalMail:
		return m.OldPersonalMail(ctx)
	case personal.FieldPersonalPhone:
		return m.OldPersonalPhone(ctx)
	case personal.FieldAdded:
		return m.OldAdded(ctx)
	}
	return nil, fmt.Errorf("unknown Personal field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PersonalMutation) SetField(name string, value ent.Value) error {
	switch name {
	case personal.FieldPersonalName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPersonalName(v)
		return nil
	case personal.FieldPersonalMail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPersonalMail(v)
		return nil
	case personal.FieldPersonalPhone:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPersonalPhone(v)
		return nil
	case personal.FieldAdded:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAdded(v)
		return nil
	}
	return fmt.Errorf("unknown Personal field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *PersonalMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *PersonalMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PersonalMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Personal numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *PersonalMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *PersonalMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *PersonalMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Personal nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *PersonalMutation) ResetField(name string) error {
	switch name {
	case personal.FieldPersonalName:
		m.ResetPersonalName()
		return nil
	case personal.FieldPersonalMail:
		m.ResetPersonalMail()
		return nil
	case personal.FieldPersonalPhone:
		m.ResetPersonalPhone()
		return nil
	case personal.FieldAdded:
		m.ResetAdded()
		return nil
	}
	return fmt.Errorf("unknown Personal field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *PersonalMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.jobtitle != nil {
		edges = append(edges, personal.EdgeJobtitle)
	}
	if m.department != nil {
		edges = append(edges, personal.EdgeDepartment)
	}
	if m.systemmember != nil {
		edges = append(edges, personal.EdgeSystemmember)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *PersonalMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case personal.EdgeJobtitle:
		if id := m.jobtitle; id != nil {
			return []ent.Value{*id}
		}
	case personal.EdgeDepartment:
		if id := m.department; id != nil {
			return []ent.Value{*id}
		}
	case personal.EdgeSystemmember:
		if id := m.systemmember; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *PersonalMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *PersonalMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *PersonalMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedjobtitle {
		edges = append(edges, personal.EdgeJobtitle)
	}
	if m.cleareddepartment {
		edges = append(edges, personal.EdgeDepartment)
	}
	if m.clearedsystemmember {
		edges = append(edges, personal.EdgeSystemmember)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *PersonalMutation) EdgeCleared(name string) bool {
	switch name {
	case personal.EdgeJobtitle:
		return m.clearedjobtitle
	case personal.EdgeDepartment:
		return m.cleareddepartment
	case personal.EdgeSystemmember:
		return m.clearedsystemmember
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *PersonalMutation) ClearEdge(name string) error {
	switch name {
	case personal.EdgeJobtitle:
		m.ClearJobtitle()
		return nil
	case personal.EdgeDepartment:
		m.ClearDepartment()
		return nil
	case personal.EdgeSystemmember:
		m.ClearSystemmember()
		return nil
	}
	return fmt.Errorf("unknown Personal unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *PersonalMutation) ResetEdge(name string) error {
	switch name {
	case personal.EdgeJobtitle:
		m.ResetJobtitle()
		return nil
	case personal.EdgeDepartment:
		m.ResetDepartment()
		return nil
	case personal.EdgeSystemmember:
		m.ResetSystemmember()
		return nil
	}
	return fmt.Errorf("unknown Personal edge %s", name)
}

// SystemmemberMutation represents an operation that mutate the Systemmembers
// nodes in the graph.
type SystemmemberMutation struct {
	config
	op              Op
	typ             string
	id              *int
	_Mail           *string
	_Password       *string
	clearedFields   map[string]struct{}
	personal        map[int]struct{}
	removedpersonal map[int]struct{}
	done            bool
	oldValue        func(context.Context) (*Systemmember, error)
}

var _ ent.Mutation = (*SystemmemberMutation)(nil)

// systemmemberOption allows to manage the mutation configuration using functional options.
type systemmemberOption func(*SystemmemberMutation)

// newSystemmemberMutation creates new mutation for $n.Name.
func newSystemmemberMutation(c config, op Op, opts ...systemmemberOption) *SystemmemberMutation {
	m := &SystemmemberMutation{
		config:        c,
		op:            op,
		typ:           TypeSystemmember,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSystemmemberID sets the id field of the mutation.
func withSystemmemberID(id int) systemmemberOption {
	return func(m *SystemmemberMutation) {
		var (
			err   error
			once  sync.Once
			value *Systemmember
		)
		m.oldValue = func(ctx context.Context) (*Systemmember, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Systemmember.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSystemmember sets the old Systemmember of the mutation.
func withSystemmember(node *Systemmember) systemmemberOption {
	return func(m *SystemmemberMutation) {
		m.oldValue = func(context.Context) (*Systemmember, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SystemmemberMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SystemmemberMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *SystemmemberMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetMail sets the Mail field.
func (m *SystemmemberMutation) SetMail(s string) {
	m._Mail = &s
}

// Mail returns the Mail value in the mutation.
func (m *SystemmemberMutation) Mail() (r string, exists bool) {
	v := m._Mail
	if v == nil {
		return
	}
	return *v, true
}

// OldMail returns the old Mail value of the Systemmember.
// If the Systemmember object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *SystemmemberMutation) OldMail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldMail is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldMail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMail: %w", err)
	}
	return oldValue.Mail, nil
}

// ResetMail reset all changes of the "Mail" field.
func (m *SystemmemberMutation) ResetMail() {
	m._Mail = nil
}

// SetPassword sets the Password field.
func (m *SystemmemberMutation) SetPassword(s string) {
	m._Password = &s
}

// Password returns the Password value in the mutation.
func (m *SystemmemberMutation) Password() (r string, exists bool) {
	v := m._Password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old Password value of the Systemmember.
// If the Systemmember object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *SystemmemberMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPassword is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword reset all changes of the "Password" field.
func (m *SystemmemberMutation) ResetPassword() {
	m._Password = nil
}

// AddPersonalIDs adds the personal edge to Personal by ids.
func (m *SystemmemberMutation) AddPersonalIDs(ids ...int) {
	if m.personal == nil {
		m.personal = make(map[int]struct{})
	}
	for i := range ids {
		m.personal[ids[i]] = struct{}{}
	}
}

// RemovePersonalIDs removes the personal edge to Personal by ids.
func (m *SystemmemberMutation) RemovePersonalIDs(ids ...int) {
	if m.removedpersonal == nil {
		m.removedpersonal = make(map[int]struct{})
	}
	for i := range ids {
		m.removedpersonal[ids[i]] = struct{}{}
	}
}

// RemovedPersonal returns the removed ids of personal.
func (m *SystemmemberMutation) RemovedPersonalIDs() (ids []int) {
	for id := range m.removedpersonal {
		ids = append(ids, id)
	}
	return
}

// PersonalIDs returns the personal ids in the mutation.
func (m *SystemmemberMutation) PersonalIDs() (ids []int) {
	for id := range m.personal {
		ids = append(ids, id)
	}
	return
}

// ResetPersonal reset all changes of the "personal" edge.
func (m *SystemmemberMutation) ResetPersonal() {
	m.personal = nil
	m.removedpersonal = nil
}

// Op returns the operation name.
func (m *SystemmemberMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Systemmember).
func (m *SystemmemberMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *SystemmemberMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m._Mail != nil {
		fields = append(fields, systemmember.FieldMail)
	}
	if m._Password != nil {
		fields = append(fields, systemmember.FieldPassword)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *SystemmemberMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case systemmember.FieldMail:
		return m.Mail()
	case systemmember.FieldPassword:
		return m.Password()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *SystemmemberMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case systemmember.FieldMail:
		return m.OldMail(ctx)
	case systemmember.FieldPassword:
		return m.OldPassword(ctx)
	}
	return nil, fmt.Errorf("unknown Systemmember field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *SystemmemberMutation) SetField(name string, value ent.Value) error {
	switch name {
	case systemmember.FieldMail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMail(v)
		return nil
	case systemmember.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	}
	return fmt.Errorf("unknown Systemmember field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *SystemmemberMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *SystemmemberMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *SystemmemberMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Systemmember numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *SystemmemberMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *SystemmemberMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *SystemmemberMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Systemmember nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *SystemmemberMutation) ResetField(name string) error {
	switch name {
	case systemmember.FieldMail:
		m.ResetMail()
		return nil
	case systemmember.FieldPassword:
		m.ResetPassword()
		return nil
	}
	return fmt.Errorf("unknown Systemmember field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *SystemmemberMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.personal != nil {
		edges = append(edges, systemmember.EdgePersonal)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *SystemmemberMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case systemmember.EdgePersonal:
		ids := make([]ent.Value, 0, len(m.personal))
		for id := range m.personal {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *SystemmemberMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedpersonal != nil {
		edges = append(edges, systemmember.EdgePersonal)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *SystemmemberMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case systemmember.EdgePersonal:
		ids := make([]ent.Value, 0, len(m.removedpersonal))
		for id := range m.removedpersonal {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *SystemmemberMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *SystemmemberMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *SystemmemberMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Systemmember unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *SystemmemberMutation) ResetEdge(name string) error {
	switch name {
	case systemmember.EdgePersonal:
		m.ResetPersonal()
		return nil
	}
	return fmt.Errorf("unknown Systemmember edge %s", name)
}
