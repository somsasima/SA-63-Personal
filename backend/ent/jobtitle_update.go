// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/ssaatw/app/ent/jobtitle"
	"github.com/ssaatw/app/ent/personal"
	"github.com/ssaatw/app/ent/predicate"
)

// JobtitleUpdate is the builder for updating Jobtitle entities.
type JobtitleUpdate struct {
	config
	hooks      []Hook
	mutation   *JobtitleMutation
	predicates []predicate.Jobtitle
}

// Where adds a new predicate for the builder.
func (ju *JobtitleUpdate) Where(ps ...predicate.Jobtitle) *JobtitleUpdate {
	ju.predicates = append(ju.predicates, ps...)
	return ju
}

// SetJobtitlename sets the Jobtitlename field.
func (ju *JobtitleUpdate) SetJobtitlename(s string) *JobtitleUpdate {
	ju.mutation.SetJobtitlename(s)
	return ju
}

// AddPersonalIDs adds the personal edge to Personal by ids.
func (ju *JobtitleUpdate) AddPersonalIDs(ids ...int) *JobtitleUpdate {
	ju.mutation.AddPersonalIDs(ids...)
	return ju
}

// AddPersonal adds the personal edges to Personal.
func (ju *JobtitleUpdate) AddPersonal(p ...*Personal) *JobtitleUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ju.AddPersonalIDs(ids...)
}

// Mutation returns the JobtitleMutation object of the builder.
func (ju *JobtitleUpdate) Mutation() *JobtitleMutation {
	return ju.mutation
}

// RemovePersonalIDs removes the personal edge to Personal by ids.
func (ju *JobtitleUpdate) RemovePersonalIDs(ids ...int) *JobtitleUpdate {
	ju.mutation.RemovePersonalIDs(ids...)
	return ju
}

// RemovePersonal removes personal edges to Personal.
func (ju *JobtitleUpdate) RemovePersonal(p ...*Personal) *JobtitleUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ju.RemovePersonalIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (ju *JobtitleUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(ju.hooks) == 0 {
		affected, err = ju.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*JobtitleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ju.mutation = mutation
			affected, err = ju.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ju.hooks) - 1; i >= 0; i-- {
			mut = ju.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ju.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ju *JobtitleUpdate) SaveX(ctx context.Context) int {
	affected, err := ju.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ju *JobtitleUpdate) Exec(ctx context.Context) error {
	_, err := ju.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ju *JobtitleUpdate) ExecX(ctx context.Context) {
	if err := ju.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ju *JobtitleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   jobtitle.Table,
			Columns: jobtitle.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: jobtitle.FieldID,
			},
		},
	}
	if ps := ju.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ju.mutation.Jobtitlename(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: jobtitle.FieldJobtitlename,
		})
	}
	if nodes := ju.mutation.RemovedPersonalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobtitle.PersonalTable,
			Columns: []string{jobtitle.PersonalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: personal.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ju.mutation.PersonalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobtitle.PersonalTable,
			Columns: []string{jobtitle.PersonalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: personal.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ju.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{jobtitle.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// JobtitleUpdateOne is the builder for updating a single Jobtitle entity.
type JobtitleUpdateOne struct {
	config
	hooks    []Hook
	mutation *JobtitleMutation
}

// SetJobtitlename sets the Jobtitlename field.
func (juo *JobtitleUpdateOne) SetJobtitlename(s string) *JobtitleUpdateOne {
	juo.mutation.SetJobtitlename(s)
	return juo
}

// AddPersonalIDs adds the personal edge to Personal by ids.
func (juo *JobtitleUpdateOne) AddPersonalIDs(ids ...int) *JobtitleUpdateOne {
	juo.mutation.AddPersonalIDs(ids...)
	return juo
}

// AddPersonal adds the personal edges to Personal.
func (juo *JobtitleUpdateOne) AddPersonal(p ...*Personal) *JobtitleUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return juo.AddPersonalIDs(ids...)
}

// Mutation returns the JobtitleMutation object of the builder.
func (juo *JobtitleUpdateOne) Mutation() *JobtitleMutation {
	return juo.mutation
}

// RemovePersonalIDs removes the personal edge to Personal by ids.
func (juo *JobtitleUpdateOne) RemovePersonalIDs(ids ...int) *JobtitleUpdateOne {
	juo.mutation.RemovePersonalIDs(ids...)
	return juo
}

// RemovePersonal removes personal edges to Personal.
func (juo *JobtitleUpdateOne) RemovePersonal(p ...*Personal) *JobtitleUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return juo.RemovePersonalIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (juo *JobtitleUpdateOne) Save(ctx context.Context) (*Jobtitle, error) {

	var (
		err  error
		node *Jobtitle
	)
	if len(juo.hooks) == 0 {
		node, err = juo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*JobtitleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			juo.mutation = mutation
			node, err = juo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(juo.hooks) - 1; i >= 0; i-- {
			mut = juo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, juo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (juo *JobtitleUpdateOne) SaveX(ctx context.Context) *Jobtitle {
	j, err := juo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return j
}

// Exec executes the query on the entity.
func (juo *JobtitleUpdateOne) Exec(ctx context.Context) error {
	_, err := juo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (juo *JobtitleUpdateOne) ExecX(ctx context.Context) {
	if err := juo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (juo *JobtitleUpdateOne) sqlSave(ctx context.Context) (j *Jobtitle, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   jobtitle.Table,
			Columns: jobtitle.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: jobtitle.FieldID,
			},
		},
	}
	id, ok := juo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Jobtitle.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := juo.mutation.Jobtitlename(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: jobtitle.FieldJobtitlename,
		})
	}
	if nodes := juo.mutation.RemovedPersonalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobtitle.PersonalTable,
			Columns: []string{jobtitle.PersonalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: personal.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := juo.mutation.PersonalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobtitle.PersonalTable,
			Columns: []string{jobtitle.PersonalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: personal.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	j = &Jobtitle{config: juo.config}
	_spec.Assign = j.assignValues
	_spec.ScanValues = j.scanValues()
	if err = sqlgraph.UpdateNode(ctx, juo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{jobtitle.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return j, nil
}
