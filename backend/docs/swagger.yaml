basePath: /api/v1
definitions:
  controllers.Department:
    properties:
      departmentname:
        type: string
    type: object
  controllers.Gender:
    properties:
      gendername:
        type: string
    type: object
  controllers.Jobtitle:
    properties:
      jobtitlename:
        type: string
    type: object
  controllers.Personal:
    properties:
      department:
        type: integer
      gender:
        type: integer
      jobtitle:
        type: integer
      personalName:
        type: string
    type: object
  ent.Department:
    properties:
      Departmentname:
        description: Departmentname holds the value of the "Departmentname" field.
        type: string
      edges:
        $ref: '#/definitions/ent.DepartmentEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the DepartmentQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
    type: object
  ent.DepartmentEdges:
    properties:
      personal:
        description: Personal holds the value of the personal edge.
        items:
          $ref: '#/definitions/ent.Personal'
        type: array
    type: object
  ent.Gender:
    properties:
      Gendername:
        description: Gendername holds the value of the "Gendername" field.
        type: string
      edges:
        $ref: '#/definitions/ent.GenderEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the GenderQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
    type: object
  ent.GenderEdges:
    properties:
      personal:
        description: Personal holds the value of the personal edge.
        items:
          $ref: '#/definitions/ent.Personal'
        type: array
    type: object
  ent.Jobtitle:
    properties:
      Jobtitlename:
        description: Jobtitlename holds the value of the "Jobtitlename" field.
        type: string
      edges:
        $ref: '#/definitions/ent.JobtitleEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the JobtitleQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
    type: object
  ent.JobtitleEdges:
    properties:
      personal:
        description: Personal holds the value of the personal edge.
        items:
          $ref: '#/definitions/ent.Personal'
        type: array
    type: object
  ent.Personal:
    properties:
      PersonalName:
        description: PersonalName holds the value of the "PersonalName" field.
        type: string
      edges:
        $ref: '#/definitions/ent.PersonalEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the PersonalQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
    type: object
  ent.PersonalEdges:
    properties:
      department:
        $ref: '#/definitions/ent.Department'
        description: Department holds the value of the department edge.
        type: object
      gender:
        $ref: '#/definitions/ent.Gender'
        description: Gender holds the value of the gender edge.
        type: object
      jobtitle:
        $ref: '#/definitions/ent.Jobtitle'
        description: Jobtitle holds the value of the jobtitle edge.
        type: object
    type: object
  gin.H:
    additionalProperties: true
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server for SUT SE 2563
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: SUT SA Example API Playlist Vidoe
  version: "1.0"
paths:
  /departments:
    get:
      description: list department entities
      operationId: list-department
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Department'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List department entities
    post:
      consumes:
      - application/json
      description: Create departmnet
      operationId: create-departmnet
      parameters:
      - description: Department entity
        in: body
        name: departmnet
        required: true
        schema:
          $ref: '#/definitions/controllers.Department'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.Department'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create departmnet
  /departments/{id}:
    get:
      description: get department by ID
      operationId: get-department
      parameters:
      - description: Department ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Department'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a department entity by ID
  /genders:
    get:
      description: list gender entities
      operationId: list-gender
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Gender'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List gender entities
    post:
      consumes:
      - application/json
      description: Create gender
      operationId: create-gender
      parameters:
      - description: Gender entity
        in: body
        name: gender
        required: true
        schema:
          $ref: '#/definitions/controllers.Gender'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.Gender'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create gender
  /genders/{id}:
    get:
      description: get gender by ID
      operationId: get-gender
      parameters:
      - description: Gender ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Gender'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a gender entity by ID
  /jobtitles:
    get:
      description: list jobtitle entities
      operationId: list-jobtitle
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Jobtitle'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List jobtitle entities
    post:
      consumes:
      - application/json
      description: Create jobtitle
      operationId: create-jobtitle
      parameters:
      - description: Jobtitle entity
        in: body
        name: jobtitle
        required: true
        schema:
          $ref: '#/definitions/controllers.Jobtitle'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.Jobtitle'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create jobtitle
  /jobtitles/{id}:
    get:
      description: get jobtitle by ID
      operationId: get-jobtitle
      parameters:
      - description: Jobtitle ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Jobtitle'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a jobtitle entity by ID
  /personals:
    get:
      description: list personal entities
      operationId: list-personal
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Personal'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List personal entities
    post:
      consumes:
      - application/json
      description: Create personal
      operationId: create-personal
      parameters:
      - description: Personal entity
        in: body
        name: personal
        required: true
        schema:
          $ref: '#/definitions/controllers.Personal'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.Personal'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create personal
  /personals/{id}:
    delete:
      description: get personal by ID
      operationId: delete-personal
      parameters:
      - description: Personal ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a personal entity by ID
securityDefinitions:
  ApiKeyAuth:
    authorizationUrl: ""
    in: header
    name: Authorization
    type: apiKey
  BasicAuth:
    authorizationUrl: ""
    type: basic
  OAuth2AccessCode:
    authorizationUrl: https://example.com/oauth/authorize
    flow: accessCode
    scopes:
      admin: ' Grants read and write access to administrative information'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
  OAuth2Application:
    authorizationUrl: ""
    flow: application
    scopes:
      admin: ' Grants read and write access to administrative information'
      write: ' Grants write access'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
  OAuth2Implicit:
    authorizationUrl: https://example.com/oauth/authorize
    flow: implicit
    scopes:
      admin: ' Grants read and write access to administrative information'
      write: ' Grants write access'
    type: oauth2
  OAuth2Password:
    authorizationUrl: ""
    flow: password
    scopes:
      admin: ' Grants read and write access to administrative information'
      read: ' Grants read access'
      write: ' Grants write access'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
swagger: "2.0"
