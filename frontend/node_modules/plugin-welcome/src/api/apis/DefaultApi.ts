/* tslint:disable */
/* eslint-disable */
/**
 * SUT SA Example API Playlist Vidoe
 * This is a sample server for SUT SE 2563
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ControllersDepartment,
    ControllersDepartmentFromJSON,
    ControllersDepartmentToJSON,
    ControllersJobtitle,
    ControllersJobtitleFromJSON,
    ControllersJobtitleToJSON,
    ControllersPersonal,
    ControllersPersonalFromJSON,
    ControllersPersonalToJSON,
    ControllersSystemmember,
    ControllersSystemmemberFromJSON,
    ControllersSystemmemberToJSON,
    EntDepartment,
    EntDepartmentFromJSON,
    EntDepartmentToJSON,
    EntJobtitle,
    EntJobtitleFromJSON,
    EntJobtitleToJSON,
    EntPersonal,
    EntPersonalFromJSON,
    EntPersonalToJSON,
    EntSystemmember,
    EntSystemmemberFromJSON,
    EntSystemmemberToJSON,
} from '../models';

export interface CreateDepartmnetRequest {
    departmnet: ControllersDepartment;
}

export interface CreateJobtitleRequest {
    jobtitle: ControllersJobtitle;
}

export interface CreatePersonalRequest {
    personal: ControllersPersonal;
}

export interface CreateSystemmemberRequest {
    systemmember: ControllersSystemmember;
}

export interface DeletePersonalRequest {
    id: number;
}

export interface GetDepartmentRequest {
    id: number;
}

export interface GetJobtitleRequest {
    id: number;
}

export interface GetSystemmemberRequest {
    id: number;
}

export interface ListDepartmentRequest {
    limit?: number;
    offset?: number;
}

export interface ListJobtitleRequest {
    limit?: number;
    offset?: number;
}

export interface ListPersonalRequest {
    limit?: number;
    offset?: number;
}

export interface ListSystemmemberRequest {
    limit?: number;
    offset?: number;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Create departmnet
     * Create departmnet
     */
    async createDepartmnetRaw(requestParameters: CreateDepartmnetRequest): Promise<runtime.ApiResponse<ControllersDepartment>> {
        if (requestParameters.departmnet === null || requestParameters.departmnet === undefined) {
            throw new runtime.RequiredError('departmnet','Required parameter requestParameters.departmnet was null or undefined when calling createDepartmnet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/departments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersDepartmentToJSON(requestParameters.departmnet),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ControllersDepartmentFromJSON(jsonValue));
    }

    /**
     * Create departmnet
     * Create departmnet
     */
    async createDepartmnet(requestParameters: CreateDepartmnetRequest): Promise<ControllersDepartment> {
        const response = await this.createDepartmnetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create jobtitle
     * Create jobtitle
     */
    async createJobtitleRaw(requestParameters: CreateJobtitleRequest): Promise<runtime.ApiResponse<ControllersJobtitle>> {
        if (requestParameters.jobtitle === null || requestParameters.jobtitle === undefined) {
            throw new runtime.RequiredError('jobtitle','Required parameter requestParameters.jobtitle was null or undefined when calling createJobtitle.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/jobtitles`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersJobtitleToJSON(requestParameters.jobtitle),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ControllersJobtitleFromJSON(jsonValue));
    }

    /**
     * Create jobtitle
     * Create jobtitle
     */
    async createJobtitle(requestParameters: CreateJobtitleRequest): Promise<ControllersJobtitle> {
        const response = await this.createJobtitleRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create personal
     * Create personal
     */
    async createPersonalRaw(requestParameters: CreatePersonalRequest): Promise<runtime.ApiResponse<ControllersPersonal>> {
        if (requestParameters.personal === null || requestParameters.personal === undefined) {
            throw new runtime.RequiredError('personal','Required parameter requestParameters.personal was null or undefined when calling createPersonal.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/personals`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersPersonalToJSON(requestParameters.personal),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ControllersPersonalFromJSON(jsonValue));
    }

    /**
     * Create personal
     * Create personal
     */
    async createPersonal(requestParameters: CreatePersonalRequest): Promise<ControllersPersonal> {
        const response = await this.createPersonalRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create systemmember
     * Create systemmember
     */
    async createSystemmemberRaw(requestParameters: CreateSystemmemberRequest): Promise<runtime.ApiResponse<ControllersSystemmember>> {
        if (requestParameters.systemmember === null || requestParameters.systemmember === undefined) {
            throw new runtime.RequiredError('systemmember','Required parameter requestParameters.systemmember was null or undefined when calling createSystemmember.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/systemmembers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersSystemmemberToJSON(requestParameters.systemmember),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ControllersSystemmemberFromJSON(jsonValue));
    }

    /**
     * Create systemmember
     * Create systemmember
     */
    async createSystemmember(requestParameters: CreateSystemmemberRequest): Promise<ControllersSystemmember> {
        const response = await this.createSystemmemberRaw(requestParameters);
        return await response.value();
    }

    /**
     * get personal by ID
     * Delete a personal entity by ID
     */
    async deletePersonalRaw(requestParameters: DeletePersonalRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deletePersonal.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/personals/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get personal by ID
     * Delete a personal entity by ID
     */
    async deletePersonal(requestParameters: DeletePersonalRequest): Promise<object> {
        const response = await this.deletePersonalRaw(requestParameters);
        return await response.value();
    }

    /**
     * get department by ID
     * Get a department entity by ID
     */
    async getDepartmentRaw(requestParameters: GetDepartmentRequest): Promise<runtime.ApiResponse<EntDepartment>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getDepartment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/departments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDepartmentFromJSON(jsonValue));
    }

    /**
     * get department by ID
     * Get a department entity by ID
     */
    async getDepartment(requestParameters: GetDepartmentRequest): Promise<EntDepartment> {
        const response = await this.getDepartmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * get jobtitle by ID
     * Get a jobtitle entity by ID
     */
    async getJobtitleRaw(requestParameters: GetJobtitleRequest): Promise<runtime.ApiResponse<EntJobtitle>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getJobtitle.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/jobtitles/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntJobtitleFromJSON(jsonValue));
    }

    /**
     * get jobtitle by ID
     * Get a jobtitle entity by ID
     */
    async getJobtitle(requestParameters: GetJobtitleRequest): Promise<EntJobtitle> {
        const response = await this.getJobtitleRaw(requestParameters);
        return await response.value();
    }

    /**
     * get systemmember by ID
     * Get a systemmember entity by ID
     */
    async getSystemmemberRaw(requestParameters: GetSystemmemberRequest): Promise<runtime.ApiResponse<EntSystemmember>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSystemmember.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/systemmembers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntSystemmemberFromJSON(jsonValue));
    }

    /**
     * get systemmember by ID
     * Get a systemmember entity by ID
     */
    async getSystemmember(requestParameters: GetSystemmemberRequest): Promise<EntSystemmember> {
        const response = await this.getSystemmemberRaw(requestParameters);
        return await response.value();
    }

    /**
     * list department entities
     * List department entities
     */
    async listDepartmentRaw(requestParameters: ListDepartmentRequest): Promise<runtime.ApiResponse<Array<EntDepartment>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/departments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntDepartmentFromJSON));
    }

    /**
     * list department entities
     * List department entities
     */
    async listDepartment(requestParameters: ListDepartmentRequest): Promise<Array<EntDepartment>> {
        const response = await this.listDepartmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * list jobtitle entities
     * List jobtitle entities
     */
    async listJobtitleRaw(requestParameters: ListJobtitleRequest): Promise<runtime.ApiResponse<Array<EntJobtitle>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/jobtitles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntJobtitleFromJSON));
    }

    /**
     * list jobtitle entities
     * List jobtitle entities
     */
    async listJobtitle(requestParameters: ListJobtitleRequest): Promise<Array<EntJobtitle>> {
        const response = await this.listJobtitleRaw(requestParameters);
        return await response.value();
    }

    /**
     * list personal entities
     * List personal entities
     */
    async listPersonalRaw(requestParameters: ListPersonalRequest): Promise<runtime.ApiResponse<Array<EntPersonal>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/personals`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntPersonalFromJSON));
    }

    /**
     * list personal entities
     * List personal entities
     */
    async listPersonal(requestParameters: ListPersonalRequest): Promise<Array<EntPersonal>> {
        const response = await this.listPersonalRaw(requestParameters);
        return await response.value();
    }

    /**
     * list systemmember entities
     * List systemmember entities
     */
    async listSystemmemberRaw(requestParameters: ListSystemmemberRequest): Promise<runtime.ApiResponse<Array<EntSystemmember>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/systemmembers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntSystemmemberFromJSON));
    }

    /**
     * list systemmember entities
     * List systemmember entities
     */
    async listSystemmember(requestParameters: ListSystemmemberRequest): Promise<Array<EntSystemmember>> {
        const response = await this.listSystemmemberRaw(requestParameters);
        return await response.value();
    }

}
